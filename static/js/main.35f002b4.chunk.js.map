{"version":3,"sources":["assests/Header.js","assests/RecipeDetails.js","assests/Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","RecipeDetails","ingredients","map","ingredient","key","uuidv4","text","weight","Recipe","recipe","label","image","useState","Showdetails","setShowDetails","src","alt","onClick","App","Recipes","setRecipes","query","setQuery","RequesUrl","getRecipeData","a","Axios","get","response","data","hits","onSubmit","eventHandle","preventDefault","type","placeholder","autoComplete","onChange","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0SAceA,MAVf,WACI,OACI,yBAAKC,UAAU,UACX,sCACI,kBAAC,IAAD,S,iCCMDC,EAXO,SAAC,GACrB,OADyC,EAAlBC,YACJC,KAAI,SAAAC,GACrB,OACE,wBAAIC,IAAKC,cAAUN,UAAU,mBAC3B,wBAAIA,UAAU,mBAAmBI,EAAWG,MAC5C,wBAAIP,UAAU,qBAAd,YAA4CI,EAAWI,a,iBCYhDC,MAhBf,YAA2B,IAAD,IAATC,OAE2BA,OAAlCC,EAFgB,EAEhBA,MAAMC,EAFU,EAEVA,MAAMV,EAFI,EAEJA,YAFI,EAIgBW,oBAAS,GAJzB,mBAIfC,EAJe,KAIFC,EAJE,KAMtB,OACI,yBAAKf,UAAU,UACf,4BAAKW,GACL,yBAAKK,IAAKJ,EAAOK,IAAKN,IACtB,4BAAQX,UAAU,QAAQkB,QAAS,kBAAMH,GAAgBD,KAAzD,eAAmF,kBAAC,IAAD,MAAnF,KACCA,GAAe,kBAAC,EAAD,CAAeZ,YAAaA,M,MC+CrCiB,MApDf,WAAe,MAEiBN,mBAAS,IAF1B,mBAENO,EAFM,KAEGC,EAFH,OAGaR,mBAAS,IAHtB,mBAGNS,EAHM,KAGCC,EAHD,KAOPC,EAAS,0CAAsCF,EAAtC,mBAFD,WAEC,oBADA,oCAGTG,EAAa,uCAAG,4BAAAC,EAAA,sEACGC,IAAMC,IAAIJ,GADb,OACdK,EADc,OAGpBR,EAAWQ,EAASC,KAAKC,MACzBR,EAAS,IAJW,2CAAH,qDAgBnB,OACF,yBAAKvB,UAAU,OAEb,kBAAC,EAAD,MAEA,yBAAKA,UAAU,QACb,0BAAMgC,SAXS,SAAAC,GACfA,EAAYC,iBACZT,MAUE,2BACEzB,UAAU,SACVmC,KAAK,OACLC,YAAY,gCACZC,aAAa,MACbC,SArBU,SAAAL,GACdV,EAASU,EAAYM,OAAOC,QAqBxBA,MAAOlB,IAET,2BAAOtB,UAAU,eAAemC,KAAK,SAASK,MAAM,SAIxD,yBAAKxC,UAAU,WACZoB,IAAY,IAAKA,EAAQjB,KAAI,SAACO,GAAD,OAAY,kBAAC,EAAD,CAAQL,IAAKC,cAAUI,OAAQA,UC3CzD+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.35f002b4.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Header.css'\r\nimport FastfoodIcon from '@material-ui/icons/Fastfood';\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className='header'>\r\n            <h1>iRecipe\r\n                <FastfoodIcon />\r\n            </h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst RecipeDetails = ({ ingredients }) => {\r\n  return ingredients.map(ingredient => {\r\n    return (\r\n      <ul key={uuidv4()} className=\"ingredient-list\">\r\n        <li className=\"ingredient-text\">{ingredient.text}</li>\r\n        <li className=\"ingredient-weight\">Weight - {ingredient.weight}</li>\r\n      </ul>\r\n    );\r\n  });\r\n};\r\n\r\nexport default RecipeDetails;\r\n","import React, {useState} from 'react'\r\nimport RecipeDetails from './RecipeDetails.js'\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\n\r\nfunction Recipe({recipe}) {\r\n    //To map title,img.ingredients\r\n    const{label,image,ingredients} = recipe.recipe;\r\n    //useState again for ingredients array[]\r\n    const [Showdetails, setShowDetails] = useState(false);\r\n    \r\n    return (\r\n        <div className='recipe'>\r\n        <h2>{label}</h2>\r\n        <img src={image} alt={label}/>\r\n        <button className='buttn' onClick={() => setShowDetails(!Showdetails)}>Ingredients <ArrowDownwardIcon /> </button>\r\n        {Showdetails && <RecipeDetails ingredients={ingredients} />}\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default Recipe\r\n","import React, {useState}  from 'react';\nimport Header from './assests/Header';\nimport Axios from 'axios';\nimport './index.css';\nimport Recipe from './assests/Recipe.js';\nimport {v4 as uuidv4} from 'uuid';\nimport './assests/App.css';\n\n//Using CSS styling Flexbox, Edmame API, useEffect React Hook, uuidv4, Axios to send API requests, @material-ui/icons/ArrowDownward'\n\nfunction App() {\n //State Hooks\n  const [Recipes, setRecipes] = useState([]) // empty array for recieving data from API for recipes\n  const [query, setQuery] = useState(\"\"); // empty string to store the query from the user\n// API auth strings\n  const AppID = \"67558d62\";\n  const AppKey = \"3fb3a1061f152063fd16dbf4e3776316\";\n  const RequesUrl = `https://api.edamam.com/search?q=${query}&app_id=${AppID}&app_key=${AppKey}`;\n// Get Data from API function\n  const getRecipeData = async () => {\n    const response = await Axios.get(RequesUrl);\n    //console.log(response);\n    setRecipes(response.data.hits)\n    setQuery('')\n  };\n  //Onchange function to capture the change happening in the search field\n  const onChange= eventHandle => {\n    setQuery(eventHandle.target.value);\n  }\n  //OnSubmit function to get data once the Submit button has been clicked\n  const onSubmit = eventHandle => {\n    eventHandle.preventDefault();\n    getRecipeData();\n  }\n\n  return (\n<div className=\"app\" >\n  {/* Header*/}\n  <Header />\n  {/* Search Bar*/}\n  <div className=\"form\">\n    <form onSubmit={onSubmit}>\n      <input\n        className='search'\n        type=\"text\"\n        placeholder=\"What do you wanna cook today?\"\n        autoComplete=\"off\"\n        onChange={onChange}\n        value={query}\n      />\n      <input className=\"searchbutton\" type=\"submit\" value=\"Go\" />\n    </form>\n  </div>\n  {/* Recipes Cards*/}\n  <div className=\"recipes\">\n    {Recipes !== [] &&Recipes.map((recipe) => <Recipe key={uuidv4()} recipe={recipe} />)}\n  </div>\n</div>\n  );\n}\n\n//Create a new arrow function for the cards\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}